/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
@icon-login-name: 'icon_login';
@icon-login-x: 0px;
@icon-login-y: 44px;
@icon-login-offset-x: 0px;
@icon-login-offset-y: -44px;
@icon-login-width: 32px;
@icon-login-height: 32px;
@icon-login-total-width: 84px;
@icon-login-total-height: 76px;
@icon-login-image: '~assets/less/sprite.png?';
@icon-login: 0px 44px 0px -44px 32px 32px 84px 76px '~assets/less/sprite.png?' 'icon_login';
@minus-active-name: 'minus_active';
@minus-active-x: 0px;
@minus-active-y: 0px;
@minus-active-offset-x: 0px;
@minus-active-offset-y: 0px;
@minus-active-width: 40px;
@minus-active-height: 40px;
@minus-active-total-width: 84px;
@minus-active-total-height: 76px;
@minus-active-image: '~assets/less/sprite.png?';
@minus-active: 0px 0px 0px 0px 40px 40px 84px 76px '~assets/less/sprite.png?' 'minus_active';
@minus-name: 'minus';
@minus-x: 44px;
@minus-y: 0px;
@minus-offset-x: -44px;
@minus-offset-y: 0px;
@minus-width: 40px;
@minus-height: 40px;
@minus-total-width: 84px;
@minus-total-height: 76px;
@minus-image: '~assets/less/sprite.png?';
@minus: 44px 0px -44px 0px 40px 40px 84px 76px '~assets/less/sprite.png?' 'minus';
@spritesheet-width: 84px;
@spritesheet-height: 76px;
@spritesheet-image: '~assets/less/sprite.png?';
@spritesheet-sprites: @icon-login @minus-active @minus;
@spritesheet: 84px 76px '~assets/less/sprite.png?' @spritesheet-sprites;

/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
.sprite-width(@sprite) {
  width: extract(@sprite, 5) / 2;
}

.sprite-height(@sprite) {
  height: extract(@sprite, 6) /2;
}

.sprite-position(@sprite) {
  @sprite-offset-x: extract(@sprite, 3) /2;
  @sprite-offset-y: extract(@sprite, 4)/2;
  background-position: @sprite-offset-x @sprite-offset-y;
}

.sprite-image(@sprite) {
  @sprite-image: extract(@sprite, 9);
  @sprite-image-bare: ~`"@{sprite-image}".slice(1, -1)`;
  background-image: url(@sprite-image-bare);
}
.sprite-background-size(@sprite) {
  @sprite-total-width: extract(@sprite, 7);
  @sprite-total-height: extract(@sprite, 8);
  background-size: @sprite-total-width / 2 @sprite-total-height / 2;
}

.sprite(@sprite) {
  .sprite-image(@sprite);
  .sprite-position(@sprite);
  .sprite-width(@sprite);
  .sprite-height(@sprite);
  .sprite-background-size(@sprite);
}

/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
.sprites(@sprites, @i: 1) when (@i <= length(@sprites)) {
  @sprite: extract(@sprites, @i);
  @sprite-name: e(extract(@sprite, 10));
  .@{sprite-name} {
    .sprite(@sprite);
  }
  .sprites(@sprites, @i + 1);
}
